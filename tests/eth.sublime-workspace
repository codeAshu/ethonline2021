{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "/Users/samuellavery/scratch/ethonline2021/vyper-token/test2/test_approve.py",
			"settings":
			{
				"buffer_size": 1528,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/samuellavery/scratch/ethonline2021/vyper-token/test2/conftest.py",
			"settings":
			{
				"buffer_size": 470,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/samuellavery/scratch/ethonline2021/vyper-token/test2/test_transfer.py",
			"settings":
			{
				"buffer_size": 2381,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					19,
					"left_delete",
					null,
					"EwAAAEcDAAAAAAAARwMAAAAAAAABAAAAeUYDAAAAAAAARgMAAAAAAAABAAAAbEUDAAAAAAAARQMAAAAAAAABAAAAcEQDAAAAAAAARAMAAAAAAAABAAAAcEMDAAAAAAAAQwMAAAAAAAABAAAAdUIDAAAAAAAAQgMAAAAAAAABAAAAc0EDAAAAAAAAQQMAAAAAAAABAAAAX0ADAAAAAAAAQAMAAAAAAAABAAAAbD8DAAAAAAAAPwMAAAAAAAABAAAAYT4DAAAAAAAAPgMAAAAAAAABAAAAdD0DAAAAAAAAPQMAAAAAAAABAAAAbzwDAAAAAAAAPAMAAAAAAAABAAAAdDsDAAAAAAAAOwMAAAAAAAABAAAAIDoDAAAAAAAAOgMAAAAAAAABAAAAPTkDAAAAAAAAOQMAAAAAAAABAAAAPTgDAAAAAAAAOAMAAAAAAAABAAAAIDcDAAAAAAAANwMAAAAAAAABAAAAKTYDAAAAAAAANgMAAAAAAAABAAAAKDUDAAAAAAAANQMAAAAAAAABAAAAeQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIAwAAAAAAAEgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					16,
					"left_delete",
					null,
					"EAAAADQDAAAAAAAANAMAAAAAAAABAAAAbDMDAAAAAAAAMwMAAAAAAAABAAAAcDIDAAAAAAAAMgMAAAAAAAABAAAAcDEDAAAAAAAAMQMAAAAAAAABAAAAdTADAAAAAAAAMAMAAAAAAAABAAAAUy8DAAAAAAAALwMAAAAAAAABAAAAbC4DAAAAAAAALgMAAAAAAAABAAAAYS0DAAAAAAAALQMAAAAAAAABAAAAdCwDAAAAAAAALAMAAAAAAAABAAAAbysDAAAAAAAAKwMAAAAAAAABAAAAdCoDAAAAAAAAKgMAAAAAAAABAAAALikDAAAAAAAAKQMAAAAAAAABAAAAbigDAAAAAAAAKAMAAAAAAAABAAAAZScDAAAAAAAAJwMAAAAAAAABAAAAayYDAAAAAAAAJgMAAAAAAAABAAAAbyUDAAAAAAAAJQMAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1AwAAAAAAADUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "amount"
					},
					"BgAAACUDAAAAAAAAJgMAAAAAAAAAAAAAJgMAAAAAAAAnAwAAAAAAAAAAAAAnAwAAAAAAACgDAAAAAAAAAAAAACgDAAAAAAAAKQMAAAAAAAAAAAAAKQMAAAAAAAAqAwAAAAAAAAAAAAAqAwAAAAAAACsDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlAwAAAAAAACUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAACsDAAAAAAAALAMAAAAAAAAAAAAALAMAAAAAAAAtAwAAAAAAAAAAAAAtAwAAAAAAAC4DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArAwAAAAAAACsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAC0DAAAAAAAALQMAAAAAAAABAAAAPQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuAwAAAAAAAC4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " amount"
					},
					"BwAAAC0DAAAAAAAALgMAAAAAAAAAAAAALgMAAAAAAAAvAwAAAAAAAAAAAAAvAwAAAAAAADADAAAAAAAAAAAAADADAAAAAAAAMQMAAAAAAAAAAAAAMQMAAAAAAAAyAwAAAAAAAAAAAAAyAwAAAAAAADMDAAAAAAAAAAAAADMDAAAAAAAANAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtAwAAAAAAAC0DAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test_approve.py",
			"settings":
			{
				"buffer_size": 1512,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AQAAADUCAAAAAAAAOQIAAAAAAAAIAAAAc2FmZU1pbnQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1AgAAAAAAAD0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"",
					null,
					"AQAAACEDAAAAAAAAJQMAAAAAAAAIAAAAc2FmZU1pbnQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAwAAAAAAACkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"",
					null,
					"AQAAANMDAAAAAAAA1wMAAAAAAAAIAAAAc2FmZU1pbnQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAwAAAAAAANsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"",
					null,
					"AQAAAMsEAAAAAAAAzwQAAAAAAAAIAAAAc2FmZU1pbnQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLBAAAAAAAANMEAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test_enumeration.py",
			"settings":
			{
				"buffer_size": 1709,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"BwAAABcGAAAAAAAAGwYAAAAAAAAIAAAAc2FmZU1pbnT1BQAAAAAAAPkFAAAAAAAACAAAAHNhZmVNaW50fQQAAAAAAACBBAAAAAAAAAgAAABzYWZlTWludEcDAAAAAAAASwMAAAAAAAAIAAAAc2FmZU1pbnQlAwAAAAAAACkDAAAAAAAACAAAAHNhZmVNaW50cwIAAAAAAAB3AgAAAAAAAAgAAABzYWZlTWludLMBAAAAAAAAtwEAAAAAAAAIAAAAc2FmZU1pbnQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test_metadata.py",
			"settings":
			{
				"buffer_size": 778,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"AQAAANwBAAAAAAAA4AEAAAAAAAAIAAAAc2FmZU1pbnQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"paste",
					null,
					"AgAAADkBAAAAAAAAQQEAAAAAAAAAAAAAQQEAAAAAAABBAQAAAAAAAAcAAABiYXNlVVJJ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5AQAAAAAAAEABAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAE4BAAAAAAAATwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOAQAAAAAAAE4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAH4BAAAAAAAAfwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+AQAAAAAAAH4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAEgBAAAAAAAAUAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIAQAAAAAAAEgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAACwCAAAAAAAALQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsAgAAAAAAACwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					19,
					"left_delete",
					null,
					"EwAAAJUCAAAAAAAAlQIAAAAAAAABAAAAN5QCAAAAAAAAlAIAAAAAAAABAAAAM5MCAAAAAAAAkwIAAAAAAAABAAAAM5ICAAAAAAAAkgIAAAAAAAABAAAAMZECAAAAAAAAkQIAAAAAAAABAAAAL5ACAAAAAAAAkAIAAAAAAAABAAAAc48CAAAAAAAAjwIAAAAAAAABAAAAdI4CAAAAAAAAjgIAAAAAAAABAAAAZo0CAAAAAAAAjQIAAAAAAAABAAAAbowCAAAAAAAAjAIAAAAAAAABAAAAL4sCAAAAAAAAiwIAAAAAAAABAAAAbYoCAAAAAAAAigIAAAAAAAABAAAAb4kCAAAAAAAAiQIAAAAAAAABAAAAY4gCAAAAAAAAiAIAAAAAAAABAAAALocCAAAAAAAAhwIAAAAAAAABAAAAZYYCAAAAAAAAhgIAAAAAAAABAAAAbIUCAAAAAAAAhQIAAAAAAAABAAAAcIQCAAAAAAAAhAIAAAAAAAABAAAAbYMCAAAAAAAAgwIAAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWAgAAAAAAAJYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					9,
					"left_delete",
					null,
					"CQAAAIICAAAAAAAAggIAAAAAAAABAAAAeIECAAAAAAAAgQIAAAAAAAABAAAAZYACAAAAAAAAgAIAAAAAAAABAAAAL38CAAAAAAAAfwIAAAAAAAABAAAAL34CAAAAAAAAfgIAAAAAAAABAAAAOn0CAAAAAAAAfQIAAAAAAAABAAAAcHwCAAAAAAAAfAIAAAAAAAABAAAAdHsCAAAAAAAAewIAAAAAAAABAAAAdHoCAAAAAAAAegIAAAAAAAABAAAAaA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDAgAAAAAAAIMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"paste",
					null,
					"AQAAAHoCAAAAAAAAggIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6AgAAAAAAAHoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					4,
					"left_delete",
					null,
					"BAAAACQCAAAAAAAAJAIAAAAAAAABAAAANyMCAAAAAAAAIwIAAAAAAAABAAAAMyICAAAAAAAAIgIAAAAAAAABAAAAMyECAAAAAAAAIQIAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlAgAAAAAAACUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"paste",
					null,
					"AQAAACECAAAAAAAAKQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhAgAAAAAAACECAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAIoCAAAAAAAAiwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAgAAAAAAAIoCAAAAAAAAAAAAAAAAAAA"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAALACAAAAAAAAsQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwAgAAAAAAALACAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAO4CAAAAAAAA7wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuAgAAAAAAAO4CAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test_transfer.py",
			"settings":
			{
				"buffer_size": 3985,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"",
					null,
					"DwAAAFYPAAAAAAAAWg8AAAAAAAAIAAAAc2FmZU1pbnRFDgAAAAAAAEkOAAAAAAAACAAAAHNhZmVNaW50bg0AAAAAAAByDQAAAAAAAAgAAABzYWZlTWludGUMAAAAAAAAaQwAAAAAAAAIAAAAc2FmZU1pbnRjCwAAAAAAAGcLAAAAAAAACAAAAHNhZmVNaW50QAoAAAAAAABECgAAAAAAAAgAAABzYWZlTWludF8JAAAAAAAAYwkAAAAAAAAIAAAAc2FmZU1pbnSnBwAAAAAAAKsHAAAAAAAACAAAAHNhZmVNaW50kwYAAAAAAACXBgAAAAAAAAgAAABzYWZlTWludIIFAAAAAAAAhgUAAAAAAAAIAAAAc2FmZU1pbnSHBAAAAAAAAIsEAAAAAAAACAAAAHNhZmVNaW50nAMAAAAAAACgAwAAAAAAAAgAAABzYWZlTWludGkCAAAAAAAAbQIAAAAAAAAIAAAAc2FmZU1pbnRkAQAAAAAAAGgBAAAAAAAACAAAAHNhZmVNaW50XgAAAAAAAABiAAAAAAAAAAgAAABzYWZlTWludA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeAAAAAAAAAGYAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "# @version ^0.2.0\n\n\"\"\"\n@title ERC-721 Non-Fungible Token Standard, optional metadata extension\n@license MIT\n@author vasa (@vasa-develop)\n@notice ERC-721 Non-Fungible Token Standard, optional metadata extension\n@dev See https://eips.ethereum.org/EIPS/eip-721\n  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\n\"\"\"\n\nfrom vyper.interfaces import ERC721\n\nimplements: ERC721\n\n\n# @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface ERC721Receiver:\n# @notice Handle the receipt of an NFT\n# @dev The ERC721 smart contract calls this function on the recipient\n#  after a `transfer`. This function MAY throw to revert and reject the\n#  transfer. Return of other than the magic value MUST result in the\n#  transaction being reverted.\n#  Note: the contract address is always the message sender.\n# @param _operator The address which called `safeTransferFrom` function\n# @param _from The address which previously owned the token\n# @param _tokenId The NFT identifier which is being transferred\n# @param _data Additional data with no specified format\n# @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n#  unless throwing\n    def onERC721Received(\n            _operator: address,\n            _from: address,\n            _tokenId: uint256,\n            _data: Bytes[1024]\n        ) -> bytes32: view\n\n\n# @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n#      created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n#      number of NFTs may be created and assigned without emitting Transfer. At the time of any\n#      transfer, the approved address for that NFT (if any) is reset to none.\n# @param _from Sender of NFT (if address is zero address it indicates token creation).\n# @param _to Receiver of NFT (if address is zero address it indicates token destruction).\n# @param _tokenId The NFT that got transfered.\nevent Transfer:\n    sender: indexed(address)\n    receiver: indexed(address)\n    tokenId: indexed(uint256)\n\n# @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n#      address indicates there is no approved address. When a Transfer event emits, this also\n#      indicates that the approved address for that NFT (if any) is reset to none.\n# @param _owner Owner of NFT.\n# @param _approved Address that we are approving.\n# @param _tokenId NFT which we are approving.\nevent Approval:\n    owner: indexed(address)\n    approved: indexed(address)\n    tokenId: indexed(uint256)\n\n# @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n#      all NFTs of the owner.\n# @param _owner Owner of NFT.\n# @param _operator Address to which we are setting operator rights.\n# @param _approved Status of operator rights(true if operator rights are given and false if\n# revoked).\nevent ApprovalForAll:\n    owner: indexed(address)\n    operator: indexed(address)\n    approved: bool\n\n# @notice A descriptive name for a collection of NFTs in this contract\ntokenName: String[64]\n\n# @notice An abbreviated name for NFTs in this contract\ntokenSymbol: String[32]\n\n# @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n# @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n#   3986. The URI may point to a JSON file that conforms to the \"ERC721\n#   Metadata JSON Schema\".\ntoken_uri: String[64]\n\n# @dev Mapping from NFT ID to the address that owns it.\nidToOwner: HashMap[uint256, address]\n\n# @dev Mapping from NFT ID to approved address.\nidToApprovals: HashMap[uint256, address]\n\n# @dev Mapping from owner address to count of his tokens.\nownerToNFTokenCount: HashMap[address, uint256]\n\n# @dev Mapping from owner address to mapping of operator addresses.\nownerToOperators: HashMap[address, HashMap[address, bool]]\n\n# @dev Address of minter, who can mint a token\nminter: address\n\n# @dev Mapping of interface id to bool about whether or not it's supported\nsupportedInterfaces: HashMap[bytes32, bool]\n\n# @dev ERC165 interface ID of ERC165\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\n\n\n\n# @dev \n#     ERC165 interface ID of ERC721\n# \n#     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n#     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n#     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n#     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n#     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n#     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n#     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n#     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n#     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n# \n#     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n#     0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     \nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\n\n\n# @dev  ERC165 interface ID of ERC721TokenReceiver\n\nERC721_TOKEN_RECEIVER_INTERFACE_ID: constant(bytes32) = 0x00000000000000000000000000000000000000000000000000000000150b7a02\n\n\n# @dev \n#     ERC165 interface ID of ERC721, optional metadata extension\n#     \n#     bytes4(keccak256('name()')) == 0x06fdde03\n#     bytes4(keccak256('symbol()')) == 0x95d89b41\n#     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n# \n#     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f     \n\nERC721_METADATA_INTERFACE_ID: constant(bytes32) = 0x000000000000000000000000000000000000000000000000000000005b5e139f\n\n@external\ndef __init__(name: String[64], symbol: String[32], tokenURI: String[64]):\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.tokenName = name\n    self.tokenSymbol = symbol\n    self.token_uri = tokenURI\n    self.supportedInterfaces[ERC165_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC721_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC721_TOKEN_RECEIVER_INTERFACE_ID] = True\n    self.supportedInterfaces[ERC721_METADATA_INTERFACE_ID] = True\n    self.minter = msg.sender\n\n\n@view\n@external\ndef supportsInterface(_interfaceID: bytes32) -> bool:\n    \"\"\"\n    @dev Interface identification is specified in ERC-165.\n    @param _interfaceID Id of the interface\n    \"\"\"\n    return self.supportedInterfaces[_interfaceID]\n\n\n### METADATA FUNCTIONS ###\n\n@view\n@external\ndef name() -> String[64]:\n    return self.tokenName\n\n\n@view\n@external\ndef symbol() -> String[32]:\n    return self.tokenSymbol\n\n\n@view\n@external\ndef tokenURI() -> String[64]:\n    return self.token_uri\n\n\n### VIEW FUNCTIONS ###\n\n@view\n@external\ndef balanceOf(_owner: address) -> uint256:\n    \"\"\"\n    @dev Returns the number of NFTs owned by `_owner`.\n         Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    @param _owner Address for whom to query the balance.\n    \"\"\"\n    assert _owner != ZERO_ADDRESS\n    return self.ownerToNFTokenCount[_owner]\n\n\n@view\n@external\ndef ownerOf(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Returns the address of the owner of the NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId The identifier for an NFT.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    return owner\n\n\n@view\n@external\ndef getApproved(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Get the approved address for a single NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId ID of the NFT to query the approval of.\n    \"\"\"\n    # Throws if `_tokenId` is not a valid NFT\n    assert self.idToOwner[_tokenId] != ZERO_ADDRESS\n    return self.idToApprovals[_tokenId]\n\n\n@view\n@external\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\n    \"\"\"\n    @dev Checks if `_operator` is an approved operator for `_owner`.\n    @param _owner The address that owns the NFTs.\n    @param _operator The address that acts on behalf of the owner.\n    \"\"\"\n    return (self.ownerToOperators[_owner])[_operator]\n\n\n### TRANSFER FUNCTION HELPERS ###\n\n@view\n@internal\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Returns whether the given spender can transfer a given token ID\n    @param spender address of the spender to query\n    @param tokenId uint256 ID of the token to be transferred\n    @return bool whether the msg.sender is approved for the given token ID,\n        is an operator of the owner, or is the owner of the token\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    spenderIsOwner: bool = owner == _spender\n    spenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\n    spenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\n    return (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\n\n\n@internal\ndef _addTokenTo(_to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Add a NFT to a given address\n         Throws if `_tokenId` is owned by someone.\n    \"\"\"\n    # Throws if `_tokenId` is owned by someone\n    assert self.idToOwner[_tokenId] == ZERO_ADDRESS\n    # Change the owner\n    self.idToOwner[_tokenId] = _to\n    # Change count tracking\n    self.ownerToNFTokenCount[_to] += 1\n\n\n@internal\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\n    \"\"\"\n    @dev Remove a NFT from a given address\n         Throws if `_from` is not the current owner.\n    \"\"\"\n    # Throws if `_from` is not the current owner\n    assert self.idToOwner[_tokenId] == _from\n    # Change the owner\n    self.idToOwner[_tokenId] = ZERO_ADDRESS\n    # Change count tracking\n    self.ownerToNFTokenCount[_from] -= 1\n\n\n@internal\ndef _clearApproval(_owner: address, _tokenId: uint256):\n    \"\"\"\n    @dev Clear an approval of a given address\n         Throws if `_owner` is not the current owner.\n    \"\"\"\n    # Throws if `_owner` is not the current owner\n    assert self.idToOwner[_tokenId] == _owner\n    if self.idToApprovals[_tokenId] != ZERO_ADDRESS:\n        # Reset approvals\n        self.idToApprovals[_tokenId] = ZERO_ADDRESS\n\n\n@internal\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\n    \"\"\"\n    @dev Exeute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `_to` is the zero address.\n         Throws if `_from` is not the current owner.\n         Throws if `_tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(_sender, _tokenId)\n    # Throws if `_to` is the zero address\n    assert _to != ZERO_ADDRESS\n    # Clear approval. Throws if `_from` is not the current owner\n    self._clearApproval(_from, _tokenId)\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\n    self._removeTokenFrom(_from, _tokenId)\n    # Add NFT\n    self._addTokenTo(_to, _tokenId)\n    # Log the transfer\n    log Transfer(_from, _to, _tokenId)\n\n\n### TRANSFER FUNCTIONS ###\n\n@external\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n    @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n            they maybe be permanently lost.\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n\n\n@external\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n         NOTE: bytes4 is represented by bytes32 with padding\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n    if _to.is_contract: # check if `_to` is a contract address\n        returnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\n        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes32)\n\n\n@external\ndef approve(_approved: address, _tokenId: uint256):\n    \"\"\"\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    @param _approved Address to be approved for the given NFT ID.\n    @param _tokenId ID of the token to be approved.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    # Throws if `_approved` is the current owner\n    assert _approved != owner\n    # Check requirements\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\n    assert (senderIsOwner or senderIsApprovedForAll)\n    # Set the approval\n    self.idToApprovals[_tokenId] = _approved\n    log Approval(owner, _approved, _tokenId)\n\n\n@external\ndef setApprovalForAll(_operator: address, _approved: bool):\n    \"\"\"\n    @dev Enables or disables approval for a third party (\"operator\") to manage all of\n         `msg.sender`'s assets. It also emits the ApprovalForAll event.\n         Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\n    @notice This works even if sender doesn't own any tokens at the time.\n    @param _operator Address to add to the set of authorized operators.\n    @param _approved True if the operators is approved, false to revoke approval.\n    \"\"\"\n    # Throws if `_operator` is the `msg.sender`\n    assert _operator != msg.sender\n    self.ownerToOperators[msg.sender][_operator] = _approved\n    log ApprovalForAll(msg.sender, _operator, _approved)\n\n\n### MINT & BURN FUNCTIONS ###\n\n@external\ndef mint(_to: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Function to mint tokens\n         Throws if `msg.sender` is not the minter.\n         Throws if `_to` is zero address.\n         Throws if `_tokenId` is owned by someone.\n    @param _to The address that will receive the minted tokens.\n    @param _tokenId The token id to mint.\n    @return A boolean that indicates if the operation was successful.\n    \"\"\"\n    # Throws if `msg.sender` is not the minter\n    assert msg.sender == self.minter\n    # Throws if `_to` is zero address\n    assert _to != ZERO_ADDRESS\n    # Add NFT. Throws if `_tokenId` is owned by someone\n    self._addTokenTo(_to, _tokenId)\n    \n    log Transfer(ZERO_ADDRESS, _to, _tokenId)\n    return True\n\n\n@external\ndef burn(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != ZERO_ADDRESS\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n    log Transfer(owner, ZERO_ADDRESS, _tokenId)\n",
			"file": "/Users/samuellavery/scratch/ethonline2021/vyper-token/contracts/Token.vy",
			"file_size": 16647,
			"file_write_time": 132769116480920199,
			"settings":
			{
				"buffer_size": 16647,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					19,
					1,
					"insert",
					{
						"characters": "ba"
					},
					"AgAAAAsXAAAAAAAADBcAAAAAAAAAAAAADBcAAAAAAAANFwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALFwAAAAAAAAsXAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAAwXAAAAAAAADBcAAAAAAAABAAAAYQsXAAAAAAAACxcAAAAAAAABAAAAYg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANFwAAAAAAAA0XAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test_mint.py",
			"settings":
			{
				"buffer_size": 1005,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"",
					null,
					"BwAAAOIDAAAAAAAA5gMAAAAAAAAIAAAAc2FmZU1pbnRwAwAAAAAAAHQDAAAAAAAACAAAAHNhZmVNaW50sgIAAAAAAAC2AgAAAAAAAAgAAABzYWZlTWludBICAAAAAAAAFgIAAAAAAAAIAAAAc2FmZU1pbnTRAQAAAAAAANUBAAAAAAAACAAAAHNhZmVNaW50gQEAAAAAAACFAQAAAAAAAAgAAABzYWZlTWludJgAAAAAAAAAnAAAAAAAAAAIAAAAc2FmZU1pbnQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "test_approve_for_all.py",
			"settings":
			{
				"buffer_size": 1507,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					5,
					"left_delete",
					null,
					"BQAAAFEFAAAAAAAAUQUAAAAAAAABAAAATVAFAAAAAAAAUAUAAAAAAAABAAAAZU8FAAAAAAAATwUAAAAAAAABAAAAZk4FAAAAAAAATgUAAAAAAAABAAAAYU0FAAAAAAAATQUAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSBQAAAAAAAFIFAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAE0FAAAAAAAATgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNBQAAAAAAAE0FAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/samuellavery/scratch/ethonline2021/vyper-token",
		"/Users/samuellavery/scratch/ethonline2021/vyper-token/contracts",
		"/Users/samuellavery/scratch/ethonline2021/vyper-token/tests"
	],
	"file_history":
	[
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"safeMint",
			"uri",
			"base",
			"uri",
			"safeMint",
			"safe"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"mint"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/samuellavery/scratch/ethonline2021/vyper-token/test2/test_approve.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1528,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/samuellavery/scratch/ethonline2021/vyper-token/test2/conftest.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 470,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/samuellavery/scratch/ethonline2021/vyper-token/test2/test_transfer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2381,
						"regions":
						{
						},
						"selection":
						[
							[
								2111,
								2111
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "test_approve.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1512,
						"regions":
						{
						},
						"selection":
						[
							[
								1214,
								1214
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "test_enumeration.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1709,
						"regions":
						{
						},
						"selection":
						[
							[
								738,
								738
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "test_metadata.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 778,
						"regions":
						{
						},
						"selection":
						[
							[
								751,
								751
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "test_transfer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3985,
						"regions":
						{
						},
						"selection":
						[
							[
								94,
								98
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/samuellavery/scratch/ethonline2021/vyper-token/contracts/Token.vy",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16647,
						"regions":
						{
						},
						"selection":
						[
							[
								5793,
								5796
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "test_mint.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1005,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "test_approve_for_all.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1507,
						"regions":
						{
						},
						"selection":
						[
							[
								1358,
								1358
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "eth.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 224.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
